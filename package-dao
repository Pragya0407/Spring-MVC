package com.javatpoint.controllers;
2. import java.util.List;
3. import org.springframework.beans.factory.annotation.Autowired;
4. import org.springframework.stereotype.Controller;
5. import org.springframework.ui.Model;
6. import org.springframework.web.bind.annotation.ModelAttribute;
7. import org.springframework.web.bind.annotation.PathVariable;
8. import org.springframework.web.bind.annotation.RequestMapping;
9. import org.springframework.web.bind.annotation.RequestMethod;
10. import com.javatpoint.beans.Emp;
11. import com.javatpoint.dao.EmpDao;
12. @Controller
13. public class EmpController {
14. @Autowired
15. EmpDao dao;//will inject dao from XML file
16.
17. /*It displays a form to input data, here "command" is a reserved request attribute
18. *which is used to display object data into form
19. */
20. @RequestMapping("/empform")
21. public String showform(Model m){
22. m.addAttribute("command", new Emp());
23. return "empform";
24. }
25. /*It saves object into database. The @ModelAttribute puts request data
26. * into model object. You need to mention RequestMethod.POST method
27. * because default request is GET*/
28. @RequestMapping(value="/save",method = RequestMethod.POST)
29. public String save(@ModelAttribute("emp") Emp emp){
30. dao.save(emp);
31. return "redirect:/viewemp";//will redirect to viewemp request mapping
32. }
33. /* It provides list of employees in model object */
34. @RequestMapping("/viewemp")
35. public String viewemp(Model m){
36. List<Emp> list=dao.getEmployees();
37. m.addAttribute("list",list);
38. return "viewemp";
39. }
40. /* It displays object data into form for the given id.
41. * The @PathVariable puts URL data into variable.*/
42. @RequestMapping(value="/editemp/{id}")
43. public String edit(@PathVariable int id, Model m){
44. Emp emp=dao.getEmpById(id);
45. m.addAttribute("command",emp);
46. return "empeditform";
47. }
48. /* It updates model object. */
49. @RequestMapping(value="/editsave",method = RequestMethod.POST)
50. public String editsave(@ModelAttribute("emp") Emp emp){
51. dao.update(emp);
52. return "redirect:/viewemp";
53. }
54. /* It deletes record for the given id in URL and redirects to /viewemp */
55. @RequestMapping(value="/deleteemp/{id}",method = RequestMethod.GET)
56. public String delete(@PathVariable int id){
57. dao.delete(id);
58. return "redirect:/viewemp";
59. }
60. }
